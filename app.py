import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
import aiosqlite
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot_token import bot_token
TOKEN = bot_token
ADMIN_ID = 868359912
DB_PATH = 'users.db'

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class NotifyIncident(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_segment = State()
    waiting_for_track = State()
    waiting_for_kmpk = State()
    waiting_for_type = State()
    waiting_for_description = State()
    waiting_for_chairman = State()

# -- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î --
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY
            )""")
        # —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        await db.execute("""
            CREATE TABLE IF NOT EXISTS notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                time TEXT,
                segment TEXT,
                track TEXT,
                km_pk TEXT,
                incident_type TEXT,
                description TEXT,
                chairman TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )""")
        await db.commit()

# --- —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ ---
async def add_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id) VALUES (?)",
            (user_id,)
        )
        await db.commit()

async def get_users() -> list[int]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        rows = await cur.fetchall()
        return [r[0] for r in rows]

# --- —Ä–∞–±–æ—Ç–∞ —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ ---
async def add_notification(data: dict):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO notifications
            (date, time, segment, track, km_pk, incident_type, description, chairman)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                data['date'],
                data['time'],
                data['segment'],
                data['track'],
                data['km_pk'],
                data['incident_type'],
                data['description'],
                data['chairman']
            )
        )
        await db.commit()

async def get_notifications(limit: int = 20) -> list[dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, date, time, segment, track, km_pk, incident_type, description, chairman, created_at "
            "FROM notifications ORDER BY id DESC LIMIT ?",
            (limit,)
        )
        rows = await cur.fetchall()
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        return [
            {
                'id':    r[0],
                'date':  r[1],
                'time':  r[2],
                'segment': r[3],
                'track': r[4],
                'km_pk': r[5],
                'type':  r[6],
                'desc':  r[7],
                'chairman': r[8],
                'created_at': r[9]
            }
            for r in rows
        ]

# --- —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —á–∞—Ç-–±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö. –∞–¥–º–∏–Ω—É –≤–∞—à –∏–¥ {user_id} .")
    await message.reply(
    f"```–í–∞—à ID: {user_id}```",
    parse_mode="Markdown")

@dp.message(Command('add'), F.from_user.id == ADMIN_ID)
async def cmd_add(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <user_id>")
    user_id_str = parts[1].strip()
    if not user_id_str.isdigit():
        return await message.reply("‚ùóÔ∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    user_id = int(user_id_str)

    await add_user(user_id)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.")

@dp.message(Command('history'), F.from_user.id == ADMIN_ID)
async def cmd_history(message: types.Message):
    notifs = await get_notifications()
    if not notifs:
        return await message.reply("‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø—É—Å—Ç–∞.")
    text = []
    for n in notifs:
        text.append(
            f"#{n['id']} ({n['created_at']})\n"
            f"üìÖ {n['date']}  üïí {n['time']}\n"
            f"üõ§ {n['segment']}  üî¢ {n['track']}\n"
            f"üìç {n['km_pk']}  ‚ö†Ô∏è {n['type']}\n"
            f"üë®‚Äçüíº {n['chairman']}\n"
            "‚Äî\n"
        )
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É, –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ –ø–æ—Ä—Ü–∏—è—Ö –ø–æ 5
    chunk_size = 5
    for i in range(0, len(text), chunk_size):
        await message.reply("\n".join(text[i:i+chunk_size]))

# --- FSM: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ ---
@dp.message(Command('notify'), F.from_user.id == ADMIN_ID)
async def cmd_notify_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(NotifyIncident.waiting_for_date)
    await message.reply("üìÖ –î–∞—Ç–∞ (–î–î.MM.–ì–ì–ì–ì):")

@dp.message(NotifyIncident.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_time)
    await message.reply("üïí –í—Ä–µ–º—è (–ß–ß:–ú–ú):")

@dp.message(NotifyIncident.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_segment)
    await message.reply("üõ§ –ü–µ—Ä–µ–≥–æ–Ω/—Å—Ç–∞–Ω—Ü–∏—è:")

@dp.message(NotifyIncident.waiting_for_segment)
async def process_segment(message: types.Message, state: FSMContext):
    await state.update_data(segment=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_track)
    await message.reply("üî¢ –ü—É—Ç—å:")

@dp.message(NotifyIncident.waiting_for_track)
async def process_track(message: types.Message, state: FSMContext):
    await state.update_data(track=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_kmpk)
    await message.reply("üìç –ö–º –ü–ö:")

@dp.message(NotifyIncident.waiting_for_kmpk)
async def process_kmpk(message: types.Message, state: FSMContext):
    await state.update_data(km_pk=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_type)
    await message.reply("‚ö†Ô∏è –í–∏–¥ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:")

@dp.message(NotifyIncident.waiting_for_type)
async def process_type(message: types.Message, state: FSMContext):
    await state.update_data(incident_type=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_description)
    await message.reply("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:")

@dp.message(NotifyIncident.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(NotifyIncident.waiting_for_chairman)
    await message.reply("üë®‚Äçüíº –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é (–§–ò–û):")

@dp.message(NotifyIncident.waiting_for_chairman)
async def process_chairman(message: types.Message, state: FSMContext):
    await state.update_data(chairman=message.text.strip())
    data = await state.get_data()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await add_notification(data)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    notification = (
        "üìå –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n\n"
        f"üïí –í—Ä–µ–º—è: {data['time']} (–º–µ—Å—Ç–Ω–æ–µ)\n\n"
        f"üõ§ –ü–µ—Ä–µ–≥–æ–Ω/—Å—Ç–∞–Ω—Ü–∏—è: {data['segment']}\n\n"
        f"üî¢ –ü—É—Ç—å: {data['track']}\n\n"
        f"üìç –ö–º –ü–ö: {data['km_pk']}\n\n"
        f"‚ö†Ô∏è –í–∏–¥ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è: {data['incident_type']}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n\n"
        f"üë®‚Äçüíº –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é: {data['chairman']}"
    )

    # —Ä–∞—Å—Å—ã–ª–∫–∞
    users = await get_users()
    for uid in users:
        try:
            await bot.send_message(uid, notification)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

    await message.reply("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
    await state.clear()

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
